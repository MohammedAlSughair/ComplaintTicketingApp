// <auto-generated />
using System;
using ComplaintTicketingApp.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ComplaintTicketingApp.Migrations
{
    [DbContext(typeof(CTADBContext))]
    [Migration("20240119093140_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ComplaintTicketingApp.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Lawsuit"
                        });
                });

            modelBuilder.Entity("ComplaintTicketingApp.Entities.Document", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("UploadFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ID");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("ComplaintTicketingApp.Entities.Ticket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AdminUserID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssueDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SolvedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AdminUserID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("ReceiverUserID");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("ComplaintTicketingApp.Entities.TicketTransaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromStatus")
                        .HasColumnType("int");

                    b.Property<int>("FromUserID")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketID")
                        .HasColumnType("int");

                    b.Property<int>("ToStatus")
                        .HasColumnType("int");

                    b.Property<int>("ToUserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FromUserID");

                    b.HasIndex("TicketID")
                        .IsUnique();

                    b.HasIndex("ToUserID");

                    b.ToTable("TicketTransaction");
                });

            modelBuilder.Entity("ComplaintTicketingApp.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Admin1",
                            Password = "Admin123",
                            UserType = 1
                        },
                        new
                        {
                            ID = 2,
                            Name = "User1",
                            Password = "User123",
                            UserType = 2
                        });
                });

            modelBuilder.Entity("ComplaintTicketingApp.Entities.Ticket", b =>
                {
                    b.HasOne("ComplaintTicketingApp.Entities.User", "AdminUser")
                        .WithMany()
                        .HasForeignKey("AdminUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComplaintTicketingApp.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComplaintTicketingApp.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ComplaintTicketingApp.Entities.User", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdminUser");

                    b.Navigation("Category");

                    b.Navigation("Document");

                    b.Navigation("ReceiverUser");
                });

            modelBuilder.Entity("ComplaintTicketingApp.Entities.TicketTransaction", b =>
                {
                    b.HasOne("ComplaintTicketingApp.Entities.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComplaintTicketingApp.Entities.Ticket", "Ticket")
                        .WithOne("TicketTransaction")
                        .HasForeignKey("ComplaintTicketingApp.Entities.TicketTransaction", "TicketID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComplaintTicketingApp.Entities.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("Ticket");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("ComplaintTicketingApp.Entities.Ticket", b =>
                {
                    b.Navigation("TicketTransaction")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
